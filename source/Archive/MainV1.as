/*The MIT LicenseCopyright (c) 2012 Paul Albertson - DeutschPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package  {			import flash.display.Loader;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.MouseEvent;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.net.NetConnection;		import flash.net.NetStream;		import flash.net.URLLoader;		import flash.events.IOErrorEvent;		import flash.events.SecurityErrorEvent;		import flash.events.NetStatusEvent;		import com.adobe.utils.XMLUtil;		import com.adobe.xml.syndication.atom.Atom10;		import com.greensock.TweenLite;		import com.greensock.loading.VideoLoader;		import com.adobe.xml.syndication.atom.Entry;		import flash.utils.Timer;		import flash.events.TimerEvent;			public class Main extends MovieClip 	{		private namespace atom = "http://www.w3.org/2005/Atom";        use namespace atom; // This is the important line right here!!!!				public var atomFeedLoadSuccess:		Boolean = false;		public var flvContainer:			MovieClip;		public var tweetContainer:			MovieClip;		private var vid:					VideoLoader;			private var atomRequest:			URLRequest;		private var atomLoader:				URLLoader;		private var atomTimer:				Timer;		private var rawAtom:				XML;		protected var flvURL:				String = "video/render_comp-B_032612_twitter.flv";		protected var atomFeed:				String = "http://feeds.tidytweet.com/client/demo/feed/kraftwerkconfigtest/legacy.atom";		protected var fallBackXML:			String = "xml/fallbackXml.xml";				public function Main() 		{			init();					}		public override function toString():String 		{			return "[Main]";		}		public function init():void		{			createStageElements();					}		private function createStageElements():void		{			flvContainer = new MovieClip();			flvContainer.x = 0;			flvContainer.y = 0;						tweetContainer = new MovieClip();			tweetContainer.x = 1080;			tweetContainer.y = 148;						this.addChild(tweetContainer);			this.addChild(flvContainer);			flvPlayer();			loadAtomFeed();					}		private function loadAtomFeed():void		{			atomLoader = new URLLoader();			atomRequest = new URLRequest(atomFeed);			atomRequest.method = URLRequestMethod.GET;		// data load listener			atomLoader.addEventListener(Event.COMPLETE, onAtomLoaded);		// error handling			atomLoader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			atomLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);		// load Feed			atomTimer = new Timer(5000,0);			atomTimer.start();			atomTimer.addEventListener(TimerEvent.TIMER, timerListener);			atomLoader.load(atomRequest);		}		private function flvPlayer():void		{			vid = new VideoLoader(flvURL, {name:"Kraftwerk", container:flvContainer, width:stage.stageWidth, height:stage.stageHeight, scaleMode:"proportionalInside", autoPlay:true});			vid.addEventListener(VideoLoader.VIDEO_COMPLETE, videoCompleteHandler);			//vid.addEventListener(VideoLoader.VIDEO_BUFFER_FULL, videoBufferHandler);			vid.load();		}		private function onAtomLoaded($e:Event):void		{						//rawAtom = new XML($e.target.data);			var rawAtom:String = URLLoader($e.target).data;			//trace(rawAtom);			//trace("rawAtom.entry.length: "+rawAtom.entry.length);			parseAtom(rawAtom); 					}		/* Parser */				private function parseAtom(data:String):void		{					//XMLSyndicationLibrary does not validate that the data contains valid			//XML, so you need to validate that the data is valid XML.			//We use the XMLUtil.isValidXML API from the corelib library.			if(!XMLUtil.isValidXML(data))			{				trace("Feed does not contain valid XML.");				return;			}						//create RSS20 instance 			var atomFeed:Atom10 = new Atom10();						//parse the raw rss data				atomFeed.parse(data);								var tweetEntries:Array = atomFeed.entries;				trace("there are "+tweetEntries.length+" entries");				//tweet1Author.htmlText = rssEntries[0].author.name;				tweet1.htmlText = tweetEntries[0].title;				tweet2.htmlText = tweetEntries[1].title;				tweet3.htmlText = tweetEntries[2].title;				//trace(tweetEntries[0].author);				//trace("data.feed.entry[0].author.name: "+tweetEntries[0].author.name);								/*for each(var entry:Entry in rssEntries)				{					trace(entry.title);				}*/								//trace(data);		}						/* Handlers */		private function timerListener($e:TimerEvent):void		{			atomLoader.load(atomRequest);			trace("Timer fire");		}		private function videoBufferHandler($e:Event):void		{			trace("buffer full");			vid.playVideo();		}		private function videoCompleteHandler($e:Event):void		{			trace("videoComplete");			//vid.removeEventListener(VideoLoader.VIDEO_COMPLETE, videoCompleteHandler);			vid.gotoVideoTime(0, true, false);			//vid.playVideo();		}		private function atomFeedLoadHandler($e:Event):void		{			trace("Feed Load Complete");		}		private function writeOutput(data:String):void		{			trace(data + "\n");			//outputField.text += data + "\n";		}				private function onIOError(e:IOErrorEvent):void		{			trace("IOError : " + e.text);			//writeOutput("IOError : " + e.text);		}				private function onSecurityError(e:SecurityErrorEvent):void		{			trace("SecurityError : " + e.text);			//writeOutput("SecurityError : " + e.text);		}	}	}