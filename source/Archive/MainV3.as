/*The MIT LicenseCopyright (c) 2012 Paul Albertson - DeutschPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the "Software"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.*/package  {			import flash.display.Loader;		import flash.display.MovieClip;		import flash.events.Event;		import flash.events.MouseEvent;		import flash.net.URLRequest;		import flash.net.URLRequestMethod;		import flash.net.NetConnection;		import flash.net.NetStream;		import flash.net.URLLoader;		import flash.text.TextField;		import flash.text.TextFieldAutoSize;		import flash.events.IOErrorEvent;		import flash.events.SecurityErrorEvent;		import flash.events.NetStatusEvent;		//import com.adobe.utils.XMLUtil;		//import com.adobe.xml.syndication.atom.Atom10;		import com.greensock.TweenLite;		import com.greensock.loading.VideoLoader;		//import com.adobe.xml.syndication.atom.Entry;		import flash.utils.Timer;		import flash.events.TimerEvent;			public class Main extends MovieClip 	{	// Namespaces			public var atom:						Namespace = new Namespace("http://www.w3.org/2005/Atom");		public var media:						Namespace = new Namespace("http://search.yahoo.com/mrss/");		public var gd:							Namespace = new Namespace("http://schemas.google.com/g/2005");		public var yt:							Namespace = new Namespace("http://gdata.youtube.com/schemas/2007");			public var squareVideoCount:			Number;		public var fullVideoCount:				Number;		public var atomFeedLoadSuccess:			Boolean = false;		public var runningOnFallBackFeed:		Boolean = false;		public var squareflvContainer:			MovieClip;		public var fullScreenflvContainer:		MovieClip;		public var tweetContainer:				MovieClip;		private var fullScreenVideo:			VideoLoader;			private var squareVideo:				VideoLoader;			private var atomRequest:				URLRequest;		private var atomLoader:					URLLoader;		private var atomTimer:					Timer = new Timer(5000,0);		private var connectionCheckTimer:		Timer = new Timer(1000,0);		private var rawAtom:					XML;		protected var fullScreenflvURL:			String = "video/render_comp-B_032612.f4v";		protected var flvURL:					String = "video/render_comp-twitterA_square.f4v";		//protected var atomFeed:					String = "http://feeds.tidytweet.com/client/vwgifaway/feed/vwkraftwerkgifawayfeed/legacy.atom";		protected var atomFeed:					String = "xml/fallbackXml.xml";		protected var fallBackXML:				String = "xml/fallbackXml.xml";		protected var blankTestXML:				String = "xml/blankXML.xml";				public function Main() 		{			init();					}		public override function toString():String 		{			return "[Main]";		}		public function init():void		{			createStageElements();					}		private function createStageElements():void		{			twitterClip.visible = false;						fullScreenflvContainer = new MovieClip();			fullScreenflvContainer.x = 0;			fullScreenflvContainer.y = 0;						squareflvContainer = new MovieClip();			squareflvContainer.x = 0;			squareflvContainer.y = 0;						addChildAt(fullScreenflvContainer, 1);			addChildAt(squareflvContainer,0);						atomTimer.addEventListener(TimerEvent.TIMER, timerListener);						flvPlayer();			loadAtomFeed();					}		private function loadAtomFeed():void		{						default xml namespace = atom;						atomLoader = new URLLoader();			atomRequest = new URLRequest(atomFeed);			atomRequest.method = URLRequestMethod.GET;		// data load listener			//atomLoader.addEventListener(Event.COMPLETE, onAtomLoaded);			atomLoader.addEventListener(Event.COMPLETE, atomFeedLoadHandler);		// error handling			atomLoader.addEventListener(IOErrorEvent.IO_ERROR, onIOError);			atomLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);			atomLoader.load(atomRequest);					}		private function startTimer():void		{			//atomTimer = new Timer(5000,6);			//atomTimer.start();			//atomTimer.addEventListener(TimerEvent.TIMER, timerListener);			//atomLoader.load(atomRequest);		}		private function flvPlayer():void		{			fullScreenVideo = new VideoLoader(fullScreenflvURL, {name:"KraftwerkFull", container:fullScreenflvContainer, width:1920, height:1080, scaleMode:"proportionalInside", autoPlay:true});			fullScreenVideo.addEventListener(VideoLoader.VIDEO_COMPLETE, videoCompleteHandler);						squareVideo = new VideoLoader(flvURL, {name:"Kraftwerk", container:squareflvContainer, width:1080, height:1080, scaleMode:"proportionalInside", autoPlay:false});			squareVideo.addEventListener(VideoLoader.VIDEO_COMPLETE, videoCompleteHandler);			//squareVideo.addEventListener(VideoLoader.VIDEO_BUFFER_FULL, videoBufferHandler);			fullScreenVideo.load();			squareVideo.load();			//squareVideo.playVideo();		}				private function pauseFullScreenVideo():void		{			trace("pauseFullScreenVideo");			fullScreenflvContainer.visible = false;			twitterClip.visible = true;			squareVideo.gotoVideoTime(0, true);			atomTimer.start();		}		private function playFullScreenVideo():void		{			trace("playFullScreenVideo");			atomTimer.stop();			fullScreenflvContainer.visible = true;			twitterClip.visible = false;			fullScreenVideo.gotoVideoTime(0, true);		}		private function onAtomLoaded():void		{						twitterClip.tweet1Author.htmlText = "@"+rawAtom.entry[0].author.name.split("(",1);			twitterClip.tweet1.htmlText = rawAtom.entry[0].title;			twitterClip.tweet2Author.htmlText = "@"+rawAtom.entry[1].author.name.split("(",1);			twitterClip.tweet2.htmlText = rawAtom.entry[1].title;			twitterClip.tweet3Author.htmlText = "@"+rawAtom.entry[2].author.name.split("(",1);			twitterClip.tweet3.htmlText = rawAtom.entry[2].title;					}						/* Handlers */		private function timerListener($e:TimerEvent):void		{			atomLoader.load(atomRequest);			trace("Timer fire");		}		private function videoBufferHandler($e:Event):void		{			trace("buffer full");			squareVideo.playVideo();		}		private function videoCompleteHandler($e:Event):void		{						if ($e.target.name == "KraftwerkFull")			{				pauseFullScreenVideo();				trace($e.target+"videoComplete");			}			if ($e.target.name == "Kraftwerk")			{				playFullScreenVideo();				trace($e.target+"videoComplete");			}			//vid.removeEventListener(VideoLoader.VIDEO_COMPLETE, videoCompleteHandler);			//squareVideo.gotoVideoTime(0, true, false);			//vid.playVideo();		}		private function atomFeedLoadHandler($e:Event):void		{			if ($e.type == "complete")			{				trace("Data feed handler: "+$e.type);			}			atomFeed = atomFeed;			rawAtom = new XML($e.target.data);			rawAtom.addNamespace(atom);						if (rawAtom.entry.length()>0)			{				onAtomLoaded();				//connectionCheckTimer.stop();			} else if (rawAtom.entry.length()<=0)			{				atomLoader.removeEventListener(Event.COMPLETE, atomFeedLoadHandler);				atomLoader.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);				atomLoader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);				atomFeed = fallBackXML;								runningOnFallBackFeed = true;								loadAtomFeed();				//checkConnection();			}						//trace("rawAtom: "+rawAtom);						trace("Feed Load Complete");			trace(rawAtom.entry.length());		}/*		private function checkConnection():void		{			trace("Check Connection");			if (runningOnFallBackFeed)			{				trace("runningOnFallBackFeed: "+runningOnFallBackFeed);				atomFeed = atomFeed;				runningOnFallBackFeed = false;				connectionCheckTimer.start();				connectionCheckTimer.addEventListener(TimerEvent.TIMER, connectionTimerListener);							}		}		private function connectionTimerListener($e:TimerEvent):void		{			loadAtomFeed();			trace("Connection Timer fire");		}*/		private function writeOutput(data:String):void		{			trace(data + "\n");			//outputField.text += data + "\n";		}				private function onIOError(e:IOErrorEvent):void		{			trace("IOError : " + e.text);			//writeOutput("IOError : " + e.text);		}				private function onSecurityError(e:SecurityErrorEvent):void		{			trace("SecurityError : " + e.text);			//writeOutput("SecurityError : " + e.text);		}	}	}